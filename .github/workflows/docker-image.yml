name: CI/CD for Frontend and Backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Backend
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies for Backend
        run: npm install
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Create Frontend ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names frontend --region ${{ secrets.AWS_REGION }} || \
          aws ecr create-repository --repository-name frontend --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build Backend Docker image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          IMAGE_TAG: backend-${{ github.sha }}
        run: |
          npm run build
          docker build -t $ECR_REGISTRY/backend:$IMAGE_TAG .
          docker push $ECR_REGISTRY/backend:$IMAGE_TAG

  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies for Frontend
        run: npm install

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Create Frontend ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names frontend --region ${{ secrets.AWS_REGION }} || \
          aws ecr create-repository --repository-name frontend --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Frontend Docker image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          IMAGE_TAG: frontend-${{ github.sha }}
        run: |
          npm run build
          docker build -t $ECR_REGISTRY/frontend:$IMAGE_TAG .
          docker push $ECR_REGISTRY/frontend:$IMAGE_TAG

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to ECS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
          BACKEND_IMAGE: ${{ secrets.AWS_ECR_REGISTRY }}/backend:backend-${{ github.sha }}
          FRONTEND_IMAGE: ${{ secrets.AWS_ECR_REGISTRY }}/frontend:frontend-${{ github.sha }}
          TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
        run: |
          # Update ECS service with new task definitions
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION)
          NEW_TASK_DEF=$(echo $TASK_DEFINITION_JSON | jq --arg BACKEND_IMAGE "$BACKEND_IMAGE" --arg FRONTEND_IMAGE "$FRONTEND_IMAGE" '.taskDefinition | .containerDefinitions[0].image=$BACKEND_IMAGE | .containerDefinitions[1].image=$FRONTEND_IMAGE | del(.status,.revision,.requiresAttributes,.compatibilities)')
          echo $NEW_TASK_DEF > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

          # Get the new task definition ARN
          NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query "taskDefinition.taskDefinitionArn" --output text)

          # Update ECS service to use the new task definition
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN
